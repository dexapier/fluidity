package org.solemnsilence.fluidity.model;


// Fugly hacks to ditch ASAP
message HACK_ExportedNextActions {
    repeated string contexts = 1;
    repeated NextAction next_actions = 2;
}


// APP MODELS
message AreaOfFocus {
    required CommonMetadata metadata = 1;
    required string name = 2;
}


message NextAction {

    enum Status {
        ACTIVE = 1;
        INCUBATING = 2;
        COMPLETE = 3;
    }

    message Context {
        required CommonMetadata metadata = 1;
        required string name = 2;
    }

    enum EnergyEstimate {
        LOW = 1;
        MEDIUM = 2;
        HIGH = 3;
    }

    // These first fields are the same as in Project
    required CommonMetadata metadata = 1;
    required string summary = 2;
    required Priority priority = 3 [default = MEDIUM];
    optional DateTimeStamp completion_time = 4;
    optional DateTimeStamp queue_time = 5;
    optional DateTimeStamp due_time = 6;
    // Using a hack for now -- I need something to work NOW, and the
    // app isn't set up to support uuids everywhere.
//    required UUID context = 7;
    required string HACK_context = 7;
    required int32 time_estimate_minutes = 8;
    required EnergyEstimate energy_estimate = 9;

    optional string notes = 10;

    repeated URI related_resources = 11;
}


message Project {

    enum Status {
        ACTIVE = 1;
        INCUBATING = 2;
        WAITING_FOR = 3;
        COMPLETE = 4;
    }

    message WaitingForData {
        required string summary = 1;
        required DateTimeStamp waiting_since = 2;
    }

    // These first fields are the same as in NextAction
    required CommonMetadata metadata = 1;
    required string summary = 2;
    required Priority priority = 3 [default = MEDIUM];
    optional DateTimeStamp completion_time = 4;
    optional DateTimeStamp queue_time = 5;
    optional DateTimeStamp due_time = 6;

    required Status status = 7;
    optional WaitingForData waiting_for_data = 8;

    repeated UUID subprojects = 9;
    repeated UUID areas_of_focus = 10;
    repeated UUID sequential_next_actions = 11;
    repeated UUID unordered_next_actions = 12;
}


message InboxNote {
    required string summary = 1;
    optional string details = 2;
}


// APP-COMMON DATATYPES
message Tag {

    message TagMetadata {
        required UUID uuid = 1;
        required DateTimeStamp creation_time = 2;
    }

    required TagMetadata meta = 1;
    required string name = 2;
    // Future use.  I don't actually know what I want to do with this, I just
    // wanted to put the slot for it here...  since it's optional, it doesn't
    // hurt us at all.
    optional string alt_name = 3;
}


message CommonMetadata {
    required UUID uuid = 1;
    required DateTimeStamp creation_time = 2;
    repeated UUID tag_uuids = 3;
}


enum Priority {
    HIGH = 1;
    MEDIUM = 2;
    LOW = 3;
}


// "TRANSPORT"/"STORAGE" convenience types
message AllFluidityData {
    repeated AreaOfFocus areas_of_focus = 1;
    repeated Project projects = 2;
    repeated NextAction next_actions = 3;
    repeated InboxNote inbox_notes = 4;
    repeated NextAction pre_sorted_current_actions = 5;
}


// "GLOBALLY COMMON" DATA TYPES
message DateTimeStamp {
    required int32 timestamp = 1;  // UNIX timestamp
}


message Image {

    enum ImageType {
        PNG = 1;
        JPEG = 2;
    }

    required bytes image_data = 1;
    required ImageType type = 2;
}


message URI {
    required string uri = 1;
    optional string description = 2;
    optional Image favicon = 3;
}


message UUID {
    // UUIDs are natively 16 bytes long.  The wrapper class for this
    // type should validate this.
    required bytes raw_bytes = 1;
}
